Trees:-
----------------------------------------------------------------
Binary Tree Using Recursion:
#include<iostream>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
    node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }    
};

node* buildTree(node *root){
    int data;
    cout<<"Enter data:"<<endl;
    cin>>data;
    root = new node(data);
    if(data==-1){
        return NULL;

    }

    cout<<"Enter data for inserting left of "<<data<<endl;
    root->left=buildTree(root->left);
    cout<<"Enter data for inserting right of"<<data<<endl;
    root->right=buildTree(root->right);
    return root;

    
}

int main(){
    node* root=NULL;
    root=buildTree(root);

    return 0;
}
------------------------------------------------------
              Level Order Traversal:
void levelOrderTraversal(node* root) {
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty()) {
        node* temp = q.front();
        q.pop();

        if(temp == NULL) { 
            //previous level is completed
            cout << endl;
            if(!q.empty()) { 
                //pushing NULL as a separator for other levels
                q.push(NULL);
            }  
        }
        else{
            cout << temp -> data << " ";
            if(temp ->left) {
                q.push(temp ->left);
            }

            if(temp ->right) {
                q.push(temp ->right);
            }
        }
    }

}
----------------------------------------------
            Reverse Order Traversal:
void reverseLevelOrderTraversal(node* root){
    vector<int>v;
    queue<node*>q;
    if(root==NULL){
        return;
    }

    q.push(root);
    while(!q.empty()){
        node* temp=q.front();
        v.push_back(temp->data);
        
        if(temp->right){
            q.push(temp->right);
        }
        if(temp->left){
            q.push(temp->left);
        }
        q.pop();
    }
    reverse(v.begin(),v.end());
    for(auto i:v){
        cout<<i<<" ";
    }
}
--------------------------------------------------
        Inorder Traversal: LNR  
            Recursive:
void inorder(node* root){
    //base case
    if(root==NULL){
        return;
    }
    //recursive call
    //Left child
    inorder(root->left);
    //going to parent node, printing the node
    cout<<root->data<<" ";
    //Right child
    inorder(root->right);
}

        Iterative:
vector<int> IterativeInorder(node* root){
    stack<node*>st;
    vector<int>inorder;
    node* temp=root;
    while(true){
        if(temp!=NULL){
            st.push(temp);
            temp=temp->left;
        }else{
            if(st.empty()) break;
            temp=st.top();
            st.pop();
            inorder.push_back(temp->value);
            temp=temp->right;
            
        }
    }
    return inorder;
}

          Preorder Traversal: NLR
            Recursive:

void preorder(node* root){
    if(root==NULL){//base case
        return;
    }
    //recuisve call
    //printing the node
    cout<<root->data<<" ";
    //left child 
    preorder(root->left);
    //right
    preorder(root->right);

}
        Iterative:
vector<int> IterativePreorder(node* root){
    stack<node*>st;
    vector<int>preorder;
    if(root==NULL){
        return preorder;
    }
    st.push(root);
    while(!st.empty()){
        root=st.top();
        st.pop();
        preorder.push_back(root->value);
        if(root->right){
            st.push(root->right);
        }
        if(root->left)[
            st.push(root->left);
        ]
    }
    return preorder;
}

          Post Order Traversal: LRN
              Recurive:
void postorder(node* root){
    //base case
    if(root==NULL){
        return;
    }

    //recursive call
    //Left child
    postorder(root->left);
    //Right child
    postorder(root->right);
    //printing the node
    cout<<root->data<<" ";

}
          Iterative: 
vector < int > postOrderTrav(node * cur) {

  vector < int > postOrder;
  if (cur == NULL) return postOrder;

  stack < node * > st;
  while (cur != NULL || !st.empty()) {

    if (cur != NULL) {
      st.push(cur);
      cur = cur -> left;
    } else {
      node * temp = st.top() -> right;
      if (temp == NULL) {
        temp = st.top();
        st.pop();
        postOrder.push_back(temp -> data);
        while (!st.empty() && temp == st.top() -> right) {
          temp = st.top();
          st.pop();
          postOrder.push_back(temp -> data);
        }
      } else cur = temp;
    }
  }
  return postOrder;

}
--------------------------------------------------------------------------
      Building a tree from level order:
void buildFromLevelOrder(node* &root) {
    queue<node*> q;

    cout << "Enter data for root" << endl;
    int data ;
    cin >> data;
    root = new node(data);
    
    q.push(root);

    while(!q.empty()) {
        node* temp = q.front();
        q.pop();

        cout << "Enter left node for: " << temp->data << endl;
        int leftData;
        cin >> leftData;

        if(leftData != -1) {
            temp -> left = new node(leftData);
            q.push(temp->left);
        }

        cout << "Enter right node for: " << temp->data << endl;
        int rightData;
        cin >> rightData;

        if(rightData != -1) {
            temp -> right = new node(rightData);
            q.push(temp->right);
        }
    }
 }
 --------------------------------------------------------------------------------
 Counting Leaf Nodes:
 For traversing the tree, Inorder Traversal was used,
 void inorder(BinaryTreeNode<int> * root, int &count) {
    //base case
    if(root == NULL) {
        return ;
    }

    inorder(root->left, count);
   	
    //leaf node
    if(root->left == NULL && root->right == NULL) {
        count++;
    }
    
    inorder(root->right, count);

}


int noOfLeafNodes(BinaryTreeNode<int> *root){
    int cnt = 0;
    inorder(root, cnt);
    return cnt;
}
-------------------------------------------------------
Checking Whether a Tree is balanced is not:
Approach 1: T.C. = O(N^2)
bool isBalanced(node *root){
    //base case
    if(root==NULL){
        return false;
    }
    //traversal of nodes
    bool left=isBalanced(root->left);
    bool right=isBalanced(root->right);
    //calculating heights
    bool diff=abs(height(root->left)-height(root->right))<=1;

    if(left && right && diff){
        return 1;
    }else{
        return false;
    }


}

Approach 2: Using pair STL, T.C.=O(N)
pair<bool,int> isBalanced(node* root){
    if(root==NULL){
        pair<bool,int>p=make_pair(true,0);
        return p;
    }
    //creating pair's for sub-trees
    pair<int,int> left=isBalanced(root->left);
    pair<int,int>right=isBalanced(root->right);
    //saving the required result
    bool left=left.first;
    bool right=right.first;
    bool diff=abs(left.second-right.second)<=1;
    //final answer
    pair<bool,int>ans;
    if(left && right && diff){
        ans.first=true;
        
    }else{
        ans.first=true;
    }

    return ans;
}
bool isBalanced(node *root){
    return isBalanced(root).first;

}
----------------------------------------------
Checking and Calculating Sum tree
Solution:
pair<bool,int> sumTree(node* root){
    //base case
    if(root==NULL){
        pair<bool,int>p=make_pair(true,0);
    }

    //for leaf nodes
    if(root->left==NULL && root->right){
        pair<bool,int>p=make_pair(true,root->data);
    }
    //traversals
    pair<bool,int>left=sumTree(root->left);
    pair<bool,int>right=sumTree(root->right);
    //calculating the required fields
    bool leftAns=left.first;
    bool rightAns=right.first;
    bool condn= root->data==(left.second+right.second);
    //saving the final answers
    pair<bool,int>ans;
    if(leftAns && rightAns && condn){
        ans.first=true;
        ans.second= 2*root->data;
        
    }else{
        ans.first=false;
    }

    return ans;
}

bool sumTree(node* root){
    return sumTree(root).first;
}
------------------------------------------------------------------------------


## Counting number of nodes in a Binary tree:-
I/P:
int count(Node *p){  //This funcntion is used to count the number of nodes in a tree.
    int x,y;
    if(p!=NULL){
       	x=count(p->lchild);
	y=count(p->rchild);
	return x+y+1;
    }
    return 0;
}

int count(Node *p){   //This function will count number of nodes with degree 2 or nodes with two children.
   int x,y;
   if(p!=NULL){
      x=count(p->lchild);
      y=count(p->rchild);
      if(p->lchild && p->rchild){
          return x+y+1;
	  }else{
	     return x+y;
	  }
	  return 0;
   }
}
----------------------------------------------------
Height Of a Tree:
int height(node *root){
    //base case
    if(root==NULL){
        return 0;
    }

    int left=height(root->left);
    int right=height(root->right);
    int ans=max(left,right)+1;

    return ans;

}
 --------------------------------------------------------------------------------

## Binary Search Tree:-
(a) Searching -
I/P: 
int Rsearch(Node *t,int key){
    cout<<"Enter the key you want to search:";;
    cin>>key;
    if(t==NULL){
      return t;    //This function uses recursive call to search
    }else(
       if(key==t->data){
          reutn t;
       }else if(key>p->data){
          return Rsearch(p->lchild,key);
       }else{
          return Rsearch(p->rchild,key);
       }
    )
}

/* This funcction uses search iteratively.*/
Node *search(Node *t,int key){
   cout<<"Enter the key value you want to search:";
   cin>>key;
   while(t!=NULL){
     if(key==t->data){
        return t;
     }else if(key<t->data){
        t=t->lchild;
     }else{
        t=t->rchild;
     }
     
   }
   return NULL;
   
## Inserting Node in a Binary search tree:
I/P:
void insert(Node *t,int key){
  cout<<"Enter the key you want to insert:";
  cin>>key;
  
  Node *r=NULL;*t;
  while(t!=NULL){
     r=t;
     if(key==t->data){
        return;
     }else if(key<t->data){ 
        t=t->lchild;
     
     }else{
        t=t->rchild;
     }
    }
     Node *p = new Node;
     p->lchild = p->rchild = NULL;
     p->data = key;
     if(p->data<r->data){
        r->lchild = p;
     }else{
        r->rchild = p;
     }
  }
  /* This Insert function is written in recursive form form.
Node *insert(Node *p,int key){
   Node *t;
   if(p=NULL){
      t= new Node;
      t->data =key;
      t->lchild = t->rchild = NULL;
      return t;
   }
   if(key<p->data){
     p->lchild = insert(p->lchild,key);
   }else{
     p->rchild = insert(p->rchiild,key);
   }

}


int main(){ 
   Node *root =NULL;
   root = insert(root,30); //Thos statement helps in cretaing the first root node of a binary search tree.
   /*These steps now create new children nodes of the root node.*/
   insert(root,23);
   insert(root,10);
   return 0;



}
NOTE : The code below mentions the creation,search and deletion of Nodes of the Binary Search tree:
I/P:
#include<iostream>
using namespace std;

class Node{
	public:
		Node *lchild;
		int data;
		Node *rchild;
};

class Binarytree{
	private:
		Node *root;
	public:
		Binarytree(){
			root =NULL;
		}
		Node *getRoot(){
			return root;
		}
		
		void insert(int key){
			Node *p,*r;
			Node *t=root;
			//If root is empty'
			if(root==NULL){
				p=new Node;
				p->data=key;
				p->lchild=NULL;
				p->rchild=NULL;
				root=p;
				return;
			}
			while(t!=NULL){
				r=t;
				if(key<t->data){
					t=t->lchild;
				}else if(key>t->data){
					t=t->rchild;
				}else{
					return;
				}
			}
			//Now t points at NULL and r at the insert position.
			p= new Node;
			p->data=key;
			p->lchild=NULL;
			p->rchild=NULL;
			
			if(key<r->data){
				r->lchild=p;
			}else{
				r->rchild=p;
			}
			
			
			
		}
		Node *search(int key){
			Node *t = root;
			while(t!=NULL){
				if(key==t->data){
					return t;
				}else if(key<t->data){
					t=t->lchild;
				}else{
					t=t->rchild;
				}
			}
			return NULL;
		}
		void inorder(Node *p){
			if(p){
				inorder(p->lchild);
				cout<<p->data;
				inorder(p->rchild);
			}
		}
		
		int Height(Node *p){
			int x,y;
			if(p==NULL){
				return 0;
			}
			x=Height(p->lchild);
			y=Height(p->rchild);
			return x>y ? x+1 : y+1;
		}
		
		Node *Inpre(Node *p){
			while(p && p->rchild!=NULL){
				p=p->rchild;
			}
			return p;
		}
		
		Node *Insucc(Node *p){
			while(p && p->lchild==NULL){
				p=p->lchild;
			}
			return p;
		}
		Node *Delete(Node *p,int key){
			Node *q;
			if(p=NULL){
				return NULL;
			}
			
			if(p->lchild==NULL && p->rchild==NULL){ //This condition for the leaf node.
				if(p==root){
					root==NULL;
					return NULL;
				}
				delete p;
				return NULL;
			}
			if(key < p->data){
				p->lchild=Delete(p->lchild,key);
			}else if(key > p->data){
				p->rchild=Delete(p->rchild,key);
			}else{
				if(Height(p->lchild) > Height(p->rchild)){  //This is to check whether the height of the left subtree is more than the left one.
					q=Inpre(p->lchild);  //If this is true then the InorderPredecessor will take its place.
					p->data = q->data;
					p->lchild=Delete(p->lchild,q->data);
				}else{
					q=Insucc(p->rchild); //Here , InorderSuccessor will take it's place.
					p->data=q->data;
					p->rchild = Delete(p->rchild,q->data);
				}
			}
			return p;
		}
		
};


int main(){
	class Binarytree bst;
	bst.insert(90);
	bst.insert(79);
	bst.insert(60);
	
	bst.inorder(bst.getRoot());
	cout<<endl;
	
	Node *temp = bst.search(60);
	if(temp!=NULL){
		cout<<"Element found:"<<temp->data<<endl;
	}else{
		cout<<"Element not found.";
	}
	
	return 0;
}
 -----------------------------------------------------------------------------------------------------------------------------------------------------------
## AVL Trees :- These are BST with balanced heights. 
NOTE:- The balance factor whether the tree has optimum height,
Bf = (height of left sub-tree) - (height of right sub-tree)
Cases: (a) If Bf > 1 ,then the tree is not balanced.
(b) If Bf <= 1 ,the the tree is balanced.
There are 4 ways we can rotate our tree to make it balanced:-
(i) LL rotation
(ii) RR rotation
(iii) LR rotation
(iv) RL rotation
Note:- Rotation is performed on that node which is imbalanced.
I/P:
#include<iostream>
using namespace std;

class Node{
	public:
		Node *lchild;
		int data;
		int height;
		Node *rchild;
};

class AVL{
	private:
		Node *root;
	public:
		AVL(){
			root=NULL;
		}
		int Height(Node *p){
			int hl,hr;
			hl=(p && p->lchild)? p->lchild->height : 0;
			hr =(p && p->rchild) ? p->lchild->height : 0;
			
			return hl>hr ? hl+1 : hr+1;
		}
		
		int BalanceFactor(Node *p){
			int hl,hr;
			hl=(p && p->lchild)? p->lchild->height : 0;
			hr =(p && p->rchild) ? p->lchild->height : 0;
			return hl-hr;
		}
		
		Node *LLRotation(Node *p){
			Node *pl=p->lchild;
			Node *plr=pl->rchild;
			pl->rchild=p;
			p->lchild=plr;
			p->height=Height(p);
			pl->height=Height(pl);
			if(root==p){
				pl=root;
			}
			return pl;
			
		}
		
		Node *LRRotation(Node *p){
			Node *pl=p->lchild;
			Node *plr=pl->rchild;
			
			pl->rchild=plr->lchild;
			p->lchild=plr->rchild;
			
			plr->lchild=pl;
			plr->rchild=p;	
			
			pl->height=Height(pl);
			p->height=Height(p);
			plr->height=Height(plr);
			
			if(root=p){
				plr=root;
			}
			return plr;
		}
		Node *RRRotation(Node *p){
			Node *pr=p->rchild;
			Node *prl=pr->lchild;
			
			pr->lchild=p;
			p->rchild=prl;
			
			p->height=Height(p);
			pr->height=Height(pr);
			if(root==p){
				pr=root;
			}
			return pr;
		}
		
		Node *RLRotation(Node *p){
			Node *pr=p->rchild;
			Node *prl=pr->lchild;
			
			p->rchild=prl->lchild;
			pr->lchild=prl->rchild;
			
			prl->lchild=p;
			prl->rchild=pr;
			
			pr->height=Height(pr);
			p->height=Height(p);
			prl->height=Height(prl);
			
			if(root=p){
				prl=root;
			}
			return prl;
		}
		Node *Rinsert(Node *p,int key){
			Node *t=NULL;
			if(p==NULL){
				t= new Node;
				t->data=key;
				t->height=1;  /* Assumptions : Height Of node with no children = 1
				                                Height of node with single child =2 and so on...*/
				t->lchild = t->rchild =NULL;
				return t;
			}
			if(key < p->data){
				p->lchild=Rinsert(p->lchild,key);
			}else if(key > p->data){
				p->rchild=Rinsert(p->rchild,key);
			}
			p->height= Height(p); //Updating the height of each new node.
			if(BalanceFactor(p)==2 && BalanceFactor(p->lchild)==1){
				return LLRotation(p);	
			}else if (BalanceFactor(p)==2 && BalanceFactor(p->lchild)==-1){
				return LRRotation(p);
			}else if(BalanceFactor(p)==-2 && BalanceFactor(p->rchild)==-1){
				return RRRotation(p);
			}else if(BalanceFactor(p)==-2 && BalanceFactor(p->rchild)==-1){
				return RLRotation(p);
			}
			return p;
		}
		void Inorder(Node *p){
			if(p){
				Inorder(p->lchild);
				cout<<p->data<<",";
				Inorder(p->rchild);
			}
		}
		
};

int main(){
	class AVL tree;
	Node *root;
	root=tree.Rinsert(root,40);
	tree.Rinsert(root,20);
	tree.Rinsert(root,10);
	tree.Inorder(root);
	
	
	
	return 0;
}
-------------------------------
Zig-Zag Traverrsal: Brute Force Approach

vector<int> zigZagTraversal(Node* root){
    vector<int>result;
    if(root==NULL)
        return result;
    queue<*node>q;
    q.push(root);
    bool leftToRight=true;
    //Starting level order traversal
    while(!q.empty()){
        int size=q.size();
        vector<int>ans(size);//temp array to store the order
        //Level processing
        for(int i=0;i<size;i++){//for each level
            
            //At the element of curr level
            node* frontNode=q.front();
            q.pop();
            //checking the L->R OR R->L
            int index= leftToRight ? i : size-i-1;
            ans[index]=frontNode->data;

            if(frontNode->left) 
                q.push_back(frontNode->left);
            if(frontNode->right)
                q.push_back(frontNode->right);    



        }
        //changing the direction of printing 
        leftToRight=!leftToRight;
        forr(auto i:ans){
            result.push_back(i);
        }
    }
    return result;

}
-----------------------------------------------------------
Boundary Travesal:
class Solution {
public:
    void traverseLeft(Node* root, vector<int> &ans) {
        //base case and avoiding leaf nodes
        if( (root == NULL) || (root->left == NULL && root->right == NULL) )
            return ;
            
        ans.push_back(root->data);
        if(root->left)
            traverseLeft(root->left, ans);
        else
            traverseLeft(root->right, ans);
            
    }
    
    void traverseLeaf(Node* root, vector<int> &ans) {
        //base case
        if(root == NULL)
            return ;
            
        if(root->left == NULL && root->right == NULL) {
            ans.push_back(root->data);
            return;
        }
        
        traverseLeaf(root->left, ans);
        traverseLeaf(root->right, ans);
        
    }
    
    void traverseRight(Node* root, vector<int> &ans) {
        //base case and avoiding leaf nodes
        if( (root == NULL) || (root->left == NULL && root->right == NULL) )
            return ;
        
        if(root->right)
            traverseRight(root->right, ans);
        else
            traverseRight(root->left, ans);
            
        //wapas aagye
        ans.push_back(root->data);
            
    }
    
    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        if(root == NULL)
            return ans;
            
        ans.push_back(root->data);
        
        //left part print/store
        traverseLeft(root->left, ans);
        
        //traverse for Leaf Nodes
        
        //left subtree
        traverseLeaf(root->left, ans);
        //right subtree
        traverseLeaf(root->right, ans);
        
        //traverse right part
        traverseRight(root->right, ans);
        
        return ans;
        
        
    }
----------------------------------
Vertical Order Traversal:
Here, HD= distance from root node(aassumed at 0) based on a number line.
vector<int> verticalOrder(Node *root)
    {   


        //Here, map<H.D. , map<Level,node->data>>
        map<int, map<int,vector<int> > > nodes;

        //Here , queue<pair<node*,pair<HD,Level>>
        queue< pair<Node*, pair<int,int> > > q;
        vector<int> ans;
        
        if(root == NULL)
            return ans;

        //pushing the root node into the queue    
        q.push(make_pair(root, make_pair(0,0)));
        
        while(!q.empty()) {

            //creating aa temp pair for taking front element of queue
            pair<Node*, pair<int,int> > temp = q.front();
            q.pop();

            //extracting the values correctly
            Node* frontNode = temp.first;
            int hd = temp.second.first;
            int lvl = temp.second.second;

            //pushing the node->data into vector in correct order
            nodes[hd][lvl].push_back(frontNode->data);
            
            if(frontNode->left)
            //child traversals means= HD away from root,next lvl from prev 
                q.push(make_pair(frontNode->left, make_pair(hd-1, lvl+1) ));
                
            if(frontNode->right)
            //child traversals means= HD away from root,next lvl from prev 
                q.push(make_pair(frontNode->right, make_pair(hd+1, lvl+1)));
        }
        //entering the map element
        for(auto i: nodes) {
            //entering the second of nested map element
            for(auto j:i.second) {
                //accessing the vector to push the data
                for(auto k:j.second)
                {
                    ans.push_back(k);
                }
            }
        }
        return ans;
    }
 -------------------------------------
 Top View Of A Tree:
 //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        vector<int> ans;
        if(root == NULL) 
        {
            return ans;
        }
        
        map<int,int> topNode;
        queue<pair<Node*, int> > q;
        
        q.push(make_pair(root, 0));
        
        while(!q.empty()) {
            pair<Node*, int> temp = q.front();
            q.pop();
            Node* frontNode = temp.first;
            int hd = temp.second;
            
            //if one value is present for a HD, then do nothing
            if(topNode.find(hd) == topNode.end())
                topNode[hd] = frontNode -> data;
                
            if(frontNode->left)
                q.push(make_pair(frontNode->left, hd-1));
            if(frontNode->right)
                q.push(make_pair(frontNode->right, hd+1));
        }
        
        for(auto i:topNode) 
        {
            ans.push_back(i.second);
        }
        return ans;
    }
-----------------------------------------
Bottom View:
//Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
        vector<int> ans;
        if(root == NULL) 
        {
            return ans;
        }
        
        map<int,int> topNode;
        queue<pair<Node*, int> > q;
        
        q.push(make_pair(root, 0));
        
        while(!q.empty()) {
            pair<Node*, int> temp = q.front();
            q.pop();
            Node* frontNode = temp.first;
            int hd = temp.second;
            
            topNode[hd] = frontNode -> data;
                
            if(frontNode->left)
                q.push(make_pair(frontNode->left, hd-1));
            if(frontNode->right)
                q.push(make_pair(frontNode->right, hd+1));
        }
        
        for(auto i:topNode) 
        {
            ans.push_back(i.second);
        }
        return ans;
    }
--------------------------------------
Left View:
void solve(Node* root,vector<int>&ans,int lvl){
    //base case
    if(root==NULL)
        return;

    //pushing the first element of the level    
    if(lvl==ans.size())
        ans.push_back(root->data);
        
    //traversing left
    solve(root->left,ans,lvl+1);
    //traversing right
    solve(root->right,ans,lvl+1);    

}

vector<int> LeftView(Node* root){
    vector<int>ans;
    if(root==NULL)
        return ans;

    solve(root,ans,0);
    return ans;    
}
---------------------------------------------------
Right View:
void solve(Node* root,vector<int>&ans,int lvl){
    //base case
    if(root==NULL)
        return;

    //pushing the first element of the level    
    if(lvl==ans.size())
        ans.push_back(root->data);
        
    //traversing right
    solve(root->rightlvl+1);
    //traversing left
    solve(root->left,lvl+1);    

}

vector<int> Rightode* root){
    vector<int>ans;
    if(root==NULL)
        return ans;

    solve(root,ans,0);
    return ans;    
}
----------------------------------
Sum of longest bloodline of a tree(sum of longest path):
T.C.= O(N) S.C.=O(height of tree)

    void solve(Node* root, int sum, int &maxSum, int len, int &maxLen) {
        //base case
        if( root == NULL ) {
            
            if(len > maxLen) //if curr path is greater
            {
                maxLen = len;
                maxSum = sum;
            }
            else if(len == maxLen) 
            {
                maxSum = max(sum, maxSum);
            }//we ignored len<maxLen case because we are searching for longest path
            return;
        }
        //calculating sum after each traversal
        sum = sum + root->data;
        //left child traversal
        solve(root->left, sum, maxSum, len+1, maxLen);
        //right child traversal
        solve(root->right, sum, maxSum, len+1, maxLen);

    }
    
    int sumOfLongRootToLeafPath(Node *root)
    {
        int len = 0;
        int maxLen = 0;
        
        int sum = 0;
        int maxSum = INT_MIN;
        
        solve(root, sum, maxSum, len, maxLen);
        
        return maxSum;
    }
--------------------------------------------
Lowest Common Ancestor:
    Node* lca(Node* root ,int n1 ,int n2 )
    {
       //base case
        if(root == NULL)
        {
            return NULL;
        }
        
        if(root->data == n1 || root->data == n2) 
        {
            return root;
        }
        //traversing
        Node* leftAns = lca(root->left, n1, n2);
        Node* rightAns = lca(root->right, n1, n2);

        //4 cases are possible
        //curr node is LCA
        if(leftAns != NULL && rightAns != NULL) 
        {
            return root;
        }

   
        else if(leftAns != NULL && rightAns == NULL)
            return leftAns;

        
        else if(leftAns == NULL && rightAns != NULL)
            return rightAns;
            
        else//not present
            return NULL;
    }

----------------------------------------- 
K-sum paths:
given an integer K, find the all possible paths whose sum is equal to K

void solve(TreeNode* root, int k, int &count, vector<int> path) {
        //base case
        if(root == NULL)
            return ;
        
        path.push_back(root->val);
        
        //left
        solve(root->left, k, count, path);
        //right
        solve(root->right, k, count, path);
        
        //check for K Sum
        
        int size = path.size();
        long sum = 0;
        for(int i = size-1; i>=0; i--)  {
            sum += path[i];
            if(sum == k)
                count++;
        }
        
        path.pop_back()//we can choose not too use this statment.since in evry iteration a new vector will be creaated.
    }
    int pathSum(TreeNode* root, int targetSum) {
        vector<int> path;
        int count = 0;
        solve(root, targetSum, count, path);
        return count;
    }
--------------------------------------------------------------
Bulding a tree using Inorder and Preorder 
int findPosition(int in[],int element,int n){
  for(int i=0;i<n;i++){
    if(in[i]=element){
      return i;
    }
  }
  return -1;
}

Node* solve(int in[],int pre[], int &index,int inOrderStart,int inOrderEnd, int n ){
  //base case
  if(index>=n || inOrderStart>inOrderEnd){
    return NULL;
  }
  //finding the position of node in inorder array
  int element=pre[index++];//after making aa new node move on to the next element in preorder array
  int pos=findPosition(in,element,n);
  
  //creating the node
  Node* root=new Node(element);
  //recursive calls
  root->left=solve(in,pre,index,inOrderStart,pos-1,n);
  root->right=solve(in,pre,index,pos+1,inOrderEnd,n);

  return root;
}

Node* buildTree(int in[],int pre[],int n){
  int preOrderIndex=0;

  Node* root=solve(in,pre,preOrderIndex,0,n-1,n);
  return root;
}
Note: the above code can be optimised by  using mapping to avoid the use of findPostion() function which uses for loop everytime.
void createMapping(int in[],map<int,int>&nodeToIndex,int n){
  for(int i==0;i<n;i++){
    nodeToIndex[in[i]]=i;
  }
}

Node* solve(int in[],int pre[], int &index,int inOrderStart,int inOrderEnd, int n,map<int,int>&nodeToIndex ){
  //base case
  if(index>=n || inOrderStart>inOrderEnd){
    return NULL;
  }
 
  int element=pre[index++];//after making a new node move on to the next element in preorder array

  //we used mapping to get the position of element in Inorder array
  int pos=nodeToIndex(element);
  
  //creating the node
  Node* root=new Node(element);
  //recursive calls
  root->left=solve(in,pre,index,inOrderStart,pos-1,n,nodeToIndex);
  root->right=solve(in,pre,index,pos+1,inOrderEnd,n,nodeToIndex);

  return root;
}

Node* buildTree(int in[],int pre[],int n){
  int preOrderIndex=0;
  //using mapping, use it in optimized approach
  map<int,int>nodeToIndex;
  createMapping(in,nodeToIndex,n);
  Node* root=solve(in,pre,preOrderIndex,0,n-1,n,nodeToIndex);
  return root;
}
-----------------------------------------------
Using Inorder and PreOrder Array
void createMapping(int in[],map<int,int>&nodeToIndex,int n){
  for(int i==0;i<n;i++){
    nodeToIndex[in[i]]=i;
  }
}

Node* solve(int in[],int post[], int &index,int inOrderStart,int inOrderEnd, int n,map<int,int>&nodeToIndex ){
  //base case
  if(index<0 || inOrderStart>inOrderEnd){
    return NULL;
  }
 
  int element=post[index--];//after making a new node move on to the next element in postOrder array

  //we used mapping to get the position of element in Inorder array
  int pos=nodeToIndex(element);
  
  //creating the node
  Node* root=new Node(element);
  //recursive calls
  root->right=solve(in,pre,index,pos+1,inOrderEnd,n,nodeToIndex);
  root->left=solve(in,pre,index,inOrderStart,pos-1,n,nodeToIndex);


  return root;
}

Node* buildTree(int in[],int post[],int n){
  int postOrderIndex=0;
  //using mapping, use it in optimized approach
  map<int,int>nodeToIndex;
  createMapping(in,nodeToIndex,n);
  Node* root=solve(in,post,postOrderIndex,0,n-1,n,nodeToIndex);
  return root;
}
---------------------------------------------------------------


