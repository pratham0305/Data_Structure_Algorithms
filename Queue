Queues :- Follows FIFO property.
# Using an array: 
I/P:
NOTE:- Following codes are written in C language.
struct queue{    //This is how a queue's structure should look like.
	int size;
	int front;
	int rear;
	int *Q;
};


int main(){
	
	struct queue q;    //Initializing a queue.
	cout<<"Enter the size of the queue:";
	cin>>q.size;
	
	q.Q = new queue;
	q.front=q.rear=-1;
	
	return 0;
}

# Enqueue function:
I/P:
void enqueue(queue *q,int x){
	if(q->rear==q->size-1){
		cout<<"Queue is full";
	}else{
		cout<<"Enter the value you want to enter:";
		cin>>x;
		q->rear++;
		q->Q[q->rear]=x;
		
	}
	
	
}
# Dequeue function:
I/P:
int dequeue(queue *q){
   int x=-1;
   if(q->front==q->rear){
      cout<<"Queue is empty";
   }else{
      q->front++;
      x=q->Q[q->rear];
   }
   return x;
}
--------------------------------------------------------
Note: The code written below is written in C++ languge:
#include<iostream>
using namespace std;
//Using array
class Queue{
	public:
		int *arr;
		int qfront;
		int rear;
		int size;

		Queue(){
			this->size=10000;
			arr=new int[size];
			qfront=rear=0;
		}

		void enqueue(int e){
			if(rear==size-1){
				cout<<"Queue is full"<<endl;
			}else{
				arr[rear]=e;
				rear++;
			}
			

		}

		int dequeue(){
			int ans;
			if(rear==qfront){
				cout<<"Queue is empty"<<endl;
			}else{
				ans=arr[qfront];
				arr[qfront]=-1;
				qfront++;
				if(qfront==rear){//partial empty, to avoid wastage of storage
					qfront=rear=0;
				}
			}
			return ans;
		}

		int Front(){
			if(qfront==rear){
				return -1;
			}else{
				return arr[qfront];
			}
		}
		
		void display(){
			for(int i=0;i<size;i++){
				cout<<arr[i]<<" ";
			}
			cout<<endl;
		}
		bool isEmpty(){
			if(rear==qfront){
				return true;
			}else{
				return false;
			}
			
		}

};

int main(){
	Queue Q;
	Q.enqueue(56);
	Q.enqueue(90);
	Q.enqueue(52);
	Q.enqueue(920);
	Q.enqueue(67);
	cout<<Q.Front();

	return 0;
}
Queue implementation using linked list
#include<iostream>
using namespace std;

class qNode{
	public:
		int data;
		qNode* next;
		qNode(int d){
			this->data=d;
			this->next=NULL;
		}
};

class Queue{
	public:
		qNode* front;
		qNode* rear;
		Queue(){
			front=rear=NULL;
		}

		void enqueue(int e){
			qNode* temp=new qNode(e);

			if(rear==NULL){
				front=rear=temp;
			}else{
				rear->next=temp;
				rear=temp;
			}
		}

		void dequeue(){
			if(front==NULL){
				cout<<"Queue is empty"<<endl;
			}else{
				qNode* temp=front;
				front=temp->next;
				if(front==NULL){//if there is only one element
					rear=NULL;
				}
				delete temp;
			}
		}
		void display(){
			qNode* temp=front;

			while(temp!=NULL){
				cout<<temp->data<<" ";
				temp=temp->next;
			}
			cout<<endl;
		}

};

int main(){
	Queue q;
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);
	cout<<(q.front)->data<<endl;
	cout<<(q.rear)->data<<endl;
	q.display();


	return 0;
}

                  Circular Queue (Differences can be spot in enqueue,dequeue and the display function):

class CircularQueue{
    public:
    // Initialize your data structure.
    int *arr;
    int front;
    int rear;
    int size;
    CircularQueue(int n){
        // Write your code here.
        size=n;
        arr=new int[size];
        front=rear=-1;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        // To check whether queue is full
        if(front==0 && rear==(size-1)|| rear== (front-1) %(size-1)){
            return false;
        }else if(front==-1){//single elememt to push
            front=rear=0;
            
          
        }else if(rear==size-1 && front!=0){
            //to maintain cyclic nature
            rear=0;
            
        }else{
            rear++;
            
        }
        arr[rear]=value;
        return true;
    }
    

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue(){
        int ans;
        if(front==-1){//to check if queue is empty
            return -1;
        }
        ans=arr[front];
        arr[front]=-1;
        if(front==rear){//single element is present
            front=rear=-1;
        }else if(front==size-1){
            //to maintian cyclic nature 
            front=0;
        }else{
            front++;
        }
        return ans;
    }
};
-----------------------------
Double Ended Queue:
class Deque
{	
    int *arr;
    int front;
    int rear;
    int size;
public:
    // Initialize your data structure.
    Deque(int n)
    {
        size = n;
        arr = new int[n];
        front = -1;
        rear = -1;
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        //check full or not
        if( isFull() ) {
            return false;
        }
        else if(isEmpty()) {
            front  = rear = 0;
        }
        else if(front == 0 && rear != size-1) {
            front = size-1;
        } 
        else
        {
            front--;
        }
        arr[front] = x;
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        if( isFull() ) {
            return false;
        }
        else if(isEmpty()) {
            front  = rear = 0;
        }
        else if(rear == size-1 && front != 0) {
            rear = 0;
        } 
        else
        {
             rear++;
        }
        arr[rear] = x;
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        if(isEmpty()){//to check queue is empty
            //cout << "Queue is Empty " << endl;
            return -1;
        }
        
        int ans = arr[front];
        arr[front] = -1;
        
        if(front == rear) { //single element is present
            front = rear = -1;
        }
        else if(front == size - 1) {
            front = 0; //to maintain cyclic nature
        }
        else
        {//normal flow
            front++;
        }
        return ans;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
         if(isEmpty()){//to check queue is empty
            //cout << "Queue is Empty " << endl;
            return -1;
        }
        
        int ans = arr[rear];
        arr[rear] = -1;
        
        if(front == rear) { //single element is present
            front = rear = -1;
        }
        else if(rear == 0) {
            rear = size-1; //to maintain cyclic nature
        }
        else
        {//normal flow
            rear--;
        }
        return ans;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        if(isEmpty()){
            return -1;
        }
        return arr[front];
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
       if(isEmpty()){
            return -1;
        }
        return arr[rear];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        if(front == -1)
            return true;
        else
            return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
		if( (front == 0 && rear == size-1) || (front != 0 && rear == (front-1)%(size-1) ) ) {
            return true;
        }
        else
        {
            return false;
        }
    }
};
