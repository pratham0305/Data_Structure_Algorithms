---------------Fibonacci Series----------------
The Fibonacci numbers are the numbers in the following integer sequence.
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..

In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the recurrence relation 

                         n = (n-1) + (n-2)

#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
    int a=3;
    int b=56;
    int n=19;
    cout<<a<<"\n"<<b<<endl;
    for(int i=0;i<=19;i++){
        int nextNumber=a+b;
        cout<<nextNumber<<endl;
        
        //The sequence how the values are assigned to previous variable is important.
        
        a=b;           // 'a' must be assigned 'b' value, so that the original value of 'b' is not lost.
        b=nextNumber;  // 'b' must get the value of  sum Or nextNumber for the sequence to proceed successfully.
    }
	return 0;
}

---------------------------Prime Number--------------------

It is a number which is only divisible by 1 and itself and its opposite is called composite number.
Example:-  7 is a prime number.

int main() {
	// your code goes here
    int n;
    cout<<"Enter number to check:"<<endl;
    cin>>n;
    int count=0;
    for(int i=2;i<n;i++){
        if((n%i)==0){
            count+=1;
            break;
        }
        
    }
    if(count!=0){
        cout<<n<<" is not prime"<<endl;
    }else{
        cout<<n<<" is prime."<<endl;
    }
	return 0;
}


---------------------------------------------------------------------------------------
Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

 int hammingWeight(uint32_t n) {
        int count=0;
        while(n!=0){
            
            //Checking last bit.
            if((n&1)==1){
                count++;
            }
            n=n>>1;
        }
        return count;
    }
