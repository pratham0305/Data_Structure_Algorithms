

Question 1 : https://www.codingninjas.com/codestudio/problems/first-and-last-position-of-an-element-in-sorted-array_1082549

Solution:-
   LeftOccur/FirstOccur function
   
int LeftOccur(int arr[],int size,int key){
    int start=0;
    int end=size-1;
    int ans=-1;
    int mid=start+((end-start)/2);
    while(start<=end){
        if(arr[mid]==key){
            ans=mid;
            end=mid-1;
        
        }else if(key>arr[mid]){
            start=mid+1;
        }else if(key<arr[mid]){
            end=mid-1;
        }
        mid=start=((end-start)/2);
    }
    return -1;
    
    RightOccur/LastOccur function:-
 
int RightOccur(int arr[],int size,int key){
    int start=0;
    int end=size-1;
    int ans=-1;
    int mid=start+((end-start)/2);
    while(start<=end){
        if(arr[mid]==key){
            ans=mid;
            start=mid+1;
        
        }else if(key>arr[mid]){
            start=mid+1;
        }else if(key<arr[mid]){
            end=mid-1;
        }
        mid=start=((end-start)/2);
    }
    return -1;
    
 Note: If the total occurences is asked then,
 
      Total No. Of occurences = (LastOccur - FirstOccur) + 1
---------------------------------------------------------------------------------------------
Question 2:- https://leetcode.com/problems/peak-index-in-a-mountain-array/
Solution:                                                            2 
                                                                    /  \
int PeakIndex(int arr[],int size){                                 1    2                             Here, 2 is the Peak(Largest Number). 
    int s=0;                                                      /      \                      LeftSide Depiction: Array[i]<Array[i+1].....
    int e=size-1;                                                0        1                      RightSide Depiction:  Array[i]>Array[i+1].....
    int mid=s+(e-s)/2;                                          Mountain Array {0,1,2,1,0}        Peak Depiction:     ......<Array[i-1]<Array[i]>Array[i-1]>....
                                                                                  
    while(s<e){    
        if(arr[mid]<arr[mid+1]){
            s=mid+1;
        }else{
            e=mid;  // combined both RightSide and Peak Case. Hence, cannot use e=mid-1.
        }
        mid=s+(e-s)/2;
    }
    return s;
}
---------------------------------------------------------------------------
Quetion 3: Finding the Pivot Element.
 Pivot element are found in sorted and rotated arrays.
 Example:
         Array A[5]={1,3,8,10,17} //Sorted Array
         Array B[5]={3,8,10,17,1} //Sorted & Roatated(4 times) Array
         // An array could be rotated n times.
         
         Pivot Element(minimum) in B is = 1.
         
Solution:
   int getPivot(int arr[],int size){
    int s=0;
    int e=size-1;
    int mid=s+(e-s)/2;
    while(s<e){
        if(arr[mid]>=arr[0]){  
            s=mid+1;
        }else{
            e=mid;
        }
        mid=s+(e-s)/2;
    }
    return s;
}
----------------------------------------------------------
Question 4 :- https://leetcode.com/problems/search-in-rotated-sorted-array/submissions/
Solution: 
   class Solution {
public:
    int getPivot(vector<int>& arr,int size){
    int s=0;
    int e=arr.size()-1;
    int mid=s+(e-s)/2;
    while(s<e){
        if(arr[mid]>=arr[0]){
            s=mid+1;
        }else{
            e=mid;
        }
        mid=s+(e-s)/2;
    }
    return s;
}
    int BinarySearch(vector<int>& arr,int s,int e,int key){
        int start=s;
        int end=s;
        int mid=start+(end-start)/2;
        while(start<=end){
            if(arr[mid]==key){
                return mid;
            }else if(key>arr[mid]){
                start=mid+1;
            }else{
                end=mid-1;
            }
            mid=start+(end-start)/2;
        }
        return  -1;
    }
    
    
    int search(vector<int>& arr,int k){
        int pivot=getPivot(arr,arr.size());
        if(k>=arr[pivot] && k<=arr[arr.size()-1]){
            return BinarySearch(arr,pivot,arr.size()-1,k);
        }else{
            return BinarySearch(arr,0,pivot,k);
        }
        
    }
};
--------------------------------------------------
Question 5: https://leetcode.com/problems/sqrtx/submissions/
Solution:-
   long long int BinarySearch(int num){
    int s=0;
    int e=num;
    long long int ans=-1;
    long long int mid=s+(e-s)/2;
    while(s<=e){
        long long int square=mid*mid;
        if(square==num){
            return mid;
        }
        if(square<num){
            ans=mid;
            s=mid+1;
        }else{
            e=mid-1;
        }
        mid=s+(e-s)/2;
        
    }
    return ans;
    }
 
To findout the sqrt precise upto n decimal placed ww will add an extra function in the above code,
double morePrecisoin(int n,int precision,int tempsol){
    double factor=1;
    double ans = tempsol; //The integer part of square root of n
    for(int i=0;i<=precison;i++){ 
        factor=factor/10;
        for(double j=ans;j*j<n;j=j+factor){
            ans=j;
        }
    }
   return ans;
}
----------------------------------------------------------------------
Question 5: https://leetcode.com/problems/reverse-string/submissions/
Solution :- 
   class Solution {
public:
    void reverseString(vector<char>& s) {
        int st=0;
        int e=s.size()-1;
        while(st<e){
            swap(s[st++],s[e--]);
        }
        
    }
};
---------------------------------------------------
Question 6: Check if a string is a palindrome(not case sensitive).
Solution:
char toLowerCase(char c){  //'Not case sensitive' means we will have to convert all the strings to lowercase to compare the characters of the string.
    if((c>='a'&&c<='z') || (c>='0' && c<='9') ){
        return c;
    }else{
        c=c+32;
    }
}
bool palindrome(char c[],int n){
    int s=0;
    int e=n-1;
    while(s>=e){
        if(toLowerCase(c[s])!=toLowerCase(c[e])){
            return 0;
        }else{
            s++;
            e--;

        }

    }
    return 1;
}
----------------------------------------------
Question 7: https://leetcode.com/problems/valid-palindrome/
Solution: 
class Solution{
private:
    bool valid(char c){
        if((c>='a'&&c<='z') ||   (c>='A'&&c<='Z') || (c>='0'&&c<='9')   ){
            return 1;
        }
        return 0;
    }
    char toLowerCase(char c){  
        if((c>='a'&&c<='z') || (c>='0' && c<='9') ){
            return c;
        }else{
            c=c+32;
            return c;
        }
    }
    bool palindrome(string a){
        int s=0;
        int e=a.length()-1;
        while(s>=e){
            if(a[s]!=a[e]){
                return 0;
            }else{
                s++;
                e--;

            }

        }
        return 1;
    }
public:
    bool isPalindrome(string s) {
        //Removing useless characters
        string temp="";
        
        for(int i=0;i<s.length();i++ ){
            if(valid(s[i])){
                temp.push_back(s[i]);
            }
        }
            
        //cnverting to lower case
        for(int i=0;i<s.length();i++){
            temp[i]=toLowerCase(s[i]);
        }
            
        return palindrome(s);
    }
             
    
};
------------------------------------------------------------
Question 8: maximum occurence of a character in a string.
solution:
char maxOccurence(string s){
    int arra[26]={0};
    for(int i=0;i<s.length();i++){
        int position=0;
        //for lower case characters
        if(s[i]>='a' && s[i]<='z'){
            position = s[i]-'a';
        }else{//for upper case characters
            position=s[i]-'A';
        }
        arra[position]++;
    }

    int max=-1,ans=0;
    for(int i=0;i<26;i++){
        if(max<arra[i]){
            ans=i;
            max=arra[i];
        }
    }
    char finalanswer='a'+ans;
    return finalanswer;

}
int main(){
   
    string s;
    cin>>s;
    cout<<maxOccurence(s)<<endl;
    
    return 0;
}
-------------------------------------------
Question 8: Repalce all the witspaces in a string with "@u".
Solution: 
string replacSpace(string &str){
    string temp="";
    for(int i=0;i<str.length();i++){
        if(str[i]==' '){
            temp.push_back("@");
            temp.push_back("u");
        }else{
            temp.push_back(str[i]);
        }
    }

    return temp;
}
---------------------------------------------------------------
Questio 9: https://leetcode.com/problems/remove-all-occurrences-of-a-substring/submissions/
Solution:
class Solution {
public:
    string removeOccurrences(string s, string part) {
        while(s.length()!=0 && s.find(part)<s.length()){
            s.erase(s.find(part),part.length());
        }
        return s;
    }
};
-----------------------------------------------
Question 10: https://leetcode.com/problems/permutation-in-string/
Solution: 
class Solution {
private:
    bool checkEqual(int a[26], int b[26]){
        for(int i=0;i<26;i++){
            if(a[i]!=b[i]){
                return 0;
            }
        }
        return 1;
    }
public:
    bool checkInclusion(string s1, string s2) {
        int count1[26]={0};
        //creating count array for s1
        for(int i=0;i<s1.length();i++){
            int index=s1[i]-'a';
            count1[index]++;
        }
        
        //creating count for first window of s2
        int i=0;
        int windowSize=s1.size();
    
        int count2[26]={0};
        while(i<windowSize){
            int index=s2[i]-'a';
            count2[index]++;
            i++;
        }
        //checking for first window
        if(checkEqual(count1,count2)){
            return 1;
        }
        //For next window
        while(i<s2.length()){
            char newChar=s2[i];
            int index=newChar-'a';
            count2[index]++;
            
            char oldChar=  s2[i-windowSize];
            index =oldChar-'a';
            count2[index]--;
            i++;
            if(checkEqual(count1,count2)){
                return 1;
            }
            
            }
        return 0;
        
    }
};
-------------------------------------------------------------------
Question 11: Print a 2D Array or mattrix in the form of Wave Print,

               Matrix :  1 2 3
                         4 5 6
                         8 9 10 
                         
                Wave Print: 1 9 3
                            4 5 6 
                            8 2 10
Solution: Here, we have used a Vector.
vector<int> wavePrint(vector<vector<int>arr,int r,int c){
    vector<int>ans;
    for(int col=0;col<c;col++){
        if(col&1){
            //odd index ->bottom to top
            for(int row=r-1;row>=0;row--){
                //cout<<arr[row][col]       
                ans.push_back(arr[row][col]);
            }


        }else{
            //even index ->top to bottom
            for(int row=0;row<n;row++){
            
                //cout<<arr[row][col]
                ans.push_back(arr[row][col]);
            }


        }


    }
    return ans;  
}
----------------------------------------------------------------------------------
Question 12: https://leetcode.com/problems/search-a-2d-matrix/submissions/
Solution: 
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row=matrix.size();
        int col=matrix[0].size();
        
        int start=0;
        int end=(row*col)-1;
        
        int mid = start+(end-start)/2;
        while(start<=end){
            int element=matrix[mid/col][mid%col];
            if(element==target){
                return 1;
            }
            if(element<target){
                start=mid+1;
            }else{
                end=mid-1;
            }
            mid=start+(end-start)/2;
            
        }
        return 0;
        
    }
};

-----------------------------------------------------------
Book Allocation Problem
Solution:
bool isPossible(vector<int>arr,int n,int m,int mid){
    int studentCount=1;
    int pageSum=0;

    for(int i=0;i<n;i++){
        if((pageSum+arr[i]) <= mid ){
            pageSum+=arr[i];
        }else{
            studentCount++;
            if(studentCount>m || arr[i] > mid){
                return false;

            }
            pageSum=0;
            pageSum=arr[i];
        }
    }
    return true;
}
int allocation(vector<int> arr,int n,int m){
    int s=0;
    int sum=0;

    for(int i=0;i<n;i++){
        sum+=arr[i];
    }

    int e=sum;
    int ans=-1;
    int mid=s+(e-s)/2;

    while(s<=e){
        if(isPossible(arr,n,m,mid)){
            ans=mid;
            e=mid-1;
        }else{
            s=mid+1;
        }
        mid=s+(e-s)/2;

    }
    return ans;
}
------------------------------------
Painter Partition Problem
Solution: 
bool ifPossible(vector<int>arr,int k, int mid){
    int PaintingPartSum=0;
    int painterCount=1;

    for(int i=0;i<arr.size();i++){
        if((PaintingPartSum+=arr[i]) < mid){
            PaintingPartSum+=arr[i];
        }else{
            painterCount++;
            if(painterCount>k || arr[i]>mid){
                return false;
            }
            PaintingPartSum=0;
            PaintingPartSum=arr[i];
        }
    }
    return true;

}

int FindMinimumTime(vector<int> arr,int k){
    int s=0;
    int sum=0;
    for(int i=0;i<arr.size();i++){
        sum+=arr[i];
    }
    int e=sum;
    int mid=s+(e-s)/2;
    int ans=-1;

    while(s<=e){
        if(isPossible(arr,k,mid)){
            ans=mid;
            e=mid-1;
        }else{
            s=mid+1;
        }
        mid=s+(e-s)/2;
    }
    return ans;
}
------------------------------------------
Aggressive Cow Problem
Solution:
bool ifPossible(vecotr<int>& arr,int k,int mid){
    int cowCount=1;
    int lastPos=arr[0]; 

    for(int i=0;i<arr.size();i++){
        if((arr[i]-lastPos) >= mid){
            cowCount++;
            if(cowCount==k){
                return true;

            }
            lastPos=arr[i];
        }
    }
    return false;
}

int aggressiveCows(vecotr<int>& arr,int k){
    int s=0;
    int maxi=-1;
//We have to sort the given array, so as to properly calculate dist. b/w stalls
    sort(v.begin(),v.end());

    for(int i=0;i<arr.size();i++){
        maxi=max(maxi,arr[i]);
    }
    int ans=-1;
    int e=maxi;
    int mid=s+(e-s)/2;
    while(s<=e){
        if(ifPossible(arr,k,mid)){
            ans=mid;
            s=mid+1;//we need to keep cows at max distance
        }else{
            e=mid-1;
        }
        mid=s+(e-s)/2;
    }
    return ans;
}
------------------------------------------------
Question 13:https://leetcode.com/problems/move-zeroes/submissions/

Solution : 
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int nonZero=0;
        for(int j=0; j<nums.size();j++){
            if(nums[j]!=0){
                swap(nums[j],nums[nonZero]);
                nonZero++;
            }
        }
        
    }
};
-----------------------------------------------------------------------
Question 14: https://leetcode.com/problems/rotate-array/submissions/
Solution:
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        vector<int> temp(nums.size());
        
        
        for(int i=0;i<nums.size();i++){
            temp[(i+k)%nums.size()]=nums[i];    
        }
        nums=temp;
        
    }
};
-----------------------------------------------
Question 15: https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/submissions/
Solution: 
class Solution {
public:
    bool check(vector<int>& nums) {
        int count=0;
        int n=nums.size();
        for(int i=1;i<n;i++){
            if(nums[i-1]>nums[i]){
                count++;
            }
        }
        if(nums[n-1]>nums[0]){
            count++;
        }
        
        return count<=1;
    }
};
---------------------------------------------
Question 16:
https://leetcode.com/problems/subsets/submissions/
Solution:
class Solution {
private:
        void solve(vector<int>nums,vector<int>output,int index,vector<vector<int>>&ans){
            //base case
            if(index>=nums.size()){
                ans.push_back(output);  
                return ;
                
            }
            //exclude
            solve(nums,output,index+1,ans);
            //include
            
            int element=nums[index];
            output.push_back(element);
            solve(nums,output,index+1,ans);
        }
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>output;
        
        int index=0;
        solve(nums,output,index,ans);
        return ans;
        
    }
};
---------------------------------------------
Question 17 : https://leetcode.com/problems/set-matrix-zeroes/
Solution:
Approach 1 : Brute Force  , Time Complexity= O((N*M)*(M+N)) , Space Complexity = O (1)
#include<bits/stdc++.h>
using namespace std;
void setZero(vector<vector<int>> &matrix){
    int row=matrix.size(),col=matrix[0].size();

    for(int i=0;i<row;i++){
        for(int j=0;j<col;j++){

            if(matrix[i][j]==0){

                int pos=i-1;//above rows
                while(pos>=0){
                    if(matrix[pos][j]!=0){
                        matrix[pos][j]=-1;
                    }
                    pos--;
                }

                pos=i+1;//below rows
                while(pos<row){
                    if(matrix[pos][j]!=0){
                        matrix[pos][j]=-1;
                    }
                    i++;
                }

                pos=j-1;//before cols
                while(pos>=0){
                    if(matrix[i][pos]!=0){
                        matrix[i][pos]=-1;
                    }
                    pos--;
                }

                pos=j+1;//after cols
                while(pos<col){
                    if(matrix[i][pos]!=0){
                        matrix[i][pos]=-1;
                    }
                    pos++;
                }
            }
        }
    }
    //changing to zero's
    for(int i=0;i<row;i++){
        for(int j=0;j<col;j++){
            if(matrix[i][j]<=0){
                matrix[i][j]=0;
            }
        }
    }
}
int main(){
    vector<vector<int>>arr={{1,1,1},{1,0,1},{1,1,1}};
    setZero(arr);
    for (int i = 0; i < arr.size(); i++) {
        for (int j = 0; j < arr[0].size(); j++) {
            cout << arr[i][j] << " ";
        }
        cout << "\n";
    }
    return 0;
}

Approach 2 : Using New Dummy Arrays, Time Complexity= O((N*M)+(N*M)) , Space Complexity=O(N+N)
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int row=matrix.size(),col=matrix[0].size();
        vector<int>dummyR(row,-1);
        vector<int>dummyC(col,-1);
        //dummy arrays to zero
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==0){
                    dummyR[i]=0;
                    dummyC[j]=0;
                }
            }
        }
        //changing the original matrix
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(dummyR[i]==0 || dummyC[j]==0){
                    matrix[i][j]=0;
                }
            }
        }
        
    }
};
Approach 3: Optimized Approach , Time Complexity=O(2*N*M), Space Complexity = O(1)
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int row=matrix.size(),col=matrix[0].size();
        int col0=1;
        for(int i=0;i<row;i++){
            //checking the oth column if 0 exists or not
            if(matrix[i][0]==0) col0=0;
            for(int j=1;j<col;j++){
                matrix[i][0]=0;
                matrix[0][j]=0;
                
            }
        }
        //traversing from the reverse direc. to check zero's
        //and changing the values to 0
        for(int i=row-1;i>0;i--){
            for(int j=col-1;j>=0;j--){
                if(matrix[i][0]==0 || matrix[0][j]==0){
                    matrix[i][j]=0;
                }
            }
            if(col0==0){
                matrix[i][0]=0;
            }
        }
      
        
    }
};
----------------------------------------
Question 18: https://www.codingninjas.com/codestudio/problems/valid-parenthesis_795104?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0
Solution:
bool isValidParenthesis(string expression)
{
    stack<char>ans;
    for(int i=0;i<expression.length();i++){
        char c=expression[i];
        if(c=='(' || c=='{'||c=='['){
            ans.push(c);
        }else{
            if(ans.empty()){
                return false;
            }else{
                char top=ans.top();
                if((c==')' && top=='(')
                   ||(c=='}'&& top=='{')
                   ||(c==']' && top=='[')){
                    ans.pop();
                    
                }else{
                    return false;
                }
            }
        }
    }
    if(ans.empty()){
        return true;
    }else{
        return false;
    }
}
-----------------------------------------------------------
Question 19: https://www.codingninjas.com/codestudio/problems/insert-an-element-at-its-bottom-in-a-given-stack_1171166?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0
solution:
void solve(stack<int>&ans,int x){
    //base case
    if(ans.empty()){
        ans.push(x);
        return ;
    }
    //storing the other elements
    int top=ans.top();
    ans.pop();
    //recursive call
    solve(ans,x);
    //returning the elements back to stack
    ans.push(top);
}
stack<int> pushAtBottom(stack<int>& myStack, int x) {
    solve(myStack,x);
    return myStack;
}
------------------------------------
Question 20: https://www.codingninjas.com/codestudio/problems/reverse-stack-using-recursion_631875?topList=love-babbar-dsa-sheet-problems&leftPanelTab=0?source=youtube&campaign=Lovebabbarcodestudio&utm_source=youtube&utm_medium=affiliate&utm_campaign=Lovebabbarcodestudio
Solution: Time Complexity= O(n^2)
void insertAtBottom(stack<int>&ans,int x){
    //base case
    if(ans.empty()){
        ans.push(x);
        return ;
    }
    //saving the other elements
    int num=ans.top();
    ans.pop();
    //recursive call
    insertAtBottom(ans,x);
    ans.push(num);
    
}
void reverseStack(stack<int> &stack) {
     //base case
    if(stack.empty()){
        return ;
    }
    //saving the other elements
    int num=stack.top();
    stack.pop();
    //recursive call
    insertAtBottom(stack,num);
}
-------------------------------------
Question 21:https://leetcode.com/problems/pascals-triangle/submissions/
Solution: 
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>r(numRows);
        if(numRows==0)
             return r;
        //creating rows
        for(int i=0;i<numRows;i++){
            r[i].resize(i+1);//setting the size of the rows
            r[i][0]=r[i][i]=1;//setting the first and last element as 1
            for(int j=1;j<i;j++){
                r[i][j]= r[i-1][j-1]+r[i-1][j];//setting the middle values using 
                                              //values in previous row
            }
            
        }
        return r;
    }
};
---------------------------------------------
Question 22: https://leetcode.com/problems/next-permutation/submissions/
Solution:
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
       int n = nums.size(), k, l;
    	for (k = n - 2; k >= 0; k--) {
            if (nums[k] < nums[k + 1]) {
                break;
            }
        }
    	if (k < 0) {
    	    reverse(nums.begin(), nums.end());
    	} else {
    	    for (l = n - 1; l > k; l--) {
                if (nums[l] > nums[k]) {
                    break;
                }
            } 
    	    swap(nums[k], nums[l]);
    	    reverse(nums.begin() + k + 1, nums.end());
        } 
    }
};
----------------------------------------------
Question 23: https://leetcode.com/problems/maximum-subarray/
Approach 1: Brute force , 3 nested loops
int maxSubArray(vector < int > & nums, vector < int > & subarray) {
  int max_sum = 0;
  int n = nums.size();
  if (n == 1) {
    return nums[0];
  }
  int i, j;
  for (i = 0; i <= n - 1; i++) {
    for (j = i; j <= n - 1; j++) {
      int sum = 0;
      for (int k = i; k <= j; k++)
        sum = sum + nums[k];
      if (sum > max_sum) {
        subarray.clear();
        max_sum = sum;
        subarray.push_back(i);
        subarray.push_back(j);

      }
    }
  }
  return max_sum;
}
Approach 2: Using 2 loops
int maxSubArray(vector<int>&nums,vector<int>&sub){

    int max_sum=INT_MIN;
    for(int i=0;i<nums.size();i++){
        int sum=0;
        for(int j=i;j<nums.size();j++){
            sum+=nums[j];
            if(sum>max_sum){
                sub.clear();
                max_sum=sum;
                sub.push_back(i);//starting index of subarray
                sub.push_back(j);//ending index of subarray
            }
        }
    }
    return max_sum;
}
Approach 3: Kadane Algorithm
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxi=INT_MIN;
        int sum=0;
        for(auto it:nums){
            sum+=it;
            maxi=max(sum,maxi);
            if(sum<0){
                sum=0;
            }
        }
        return maxi;
    }
};
----------------------------------------------
Question 24: https://leetcode.com/problems/sort-colors/submissions/
Approach 1: without using an inbuilt algorithm
Dutch National Flag Algorithm, T.C.=O(N) , S.C.=O(1)

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0;
        int high=nums.size()-1;
        int mid=0;
        
        while(mid<=high){
            
            switch(nums[mid]){
            
                case 0:
                        swap(nums[low++],nums[mid++]);
                        break;
                case 1:
                        mid++;
                        break;
                case 2:
                        swap(nums[mid],nums[high--]);
                        break;
            }
            }
            
        
    }
};
----------------------------------------
Question 23: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
Approach 1: Brute Force , T.C.=O(N^2)
int maxProfit(vector<int> &arr) {
  int max = 0;
  int n = arr.size();
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      if (arr[j] > arr[i]) {
        max = max(arr[j] - arr[i], maxPro);
      }
    }
  }
  return max;
}

Approach 2: Optimal Solution
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int minPro=INT_MAX;
        int maxPro=0;
        
        for(int i=0;i<n;i++){
            minPro=min(minPro,prices[i]);
            maxPro=max(maxPro,prices[i]-minPro);
        }
        return maxPro;
        
    }
};
-------------------------------------------
Question 24 : https://leetcode.com/problems/rotate-image/submissions/
Approach 1: using an another matrix 
T.C.=O(N^2)  S.C.=O(N^2)

#include<bits/stdc++.h>
using namespace std;

vector<vector<int>> rotateClock(vector<vector<int>> &matrix){

    int n=matrix.size();

    vector<vector<int>>rotated(n,vector<int>(n,0));
    for(int i=0;i<n;i++){
        for(int j=0;j<matrix.size();j++){
            rotated[j][j-i-1]=matrix[i][j];//rotated row = original column
                                    //rotated column= (original row) -(original column) - 1 
        }
    }

    return rotated;
}

Approach 2: Transpose method
T.C.=O(N^2)  S.C.=O(1)
#include<bits/stdc++.h>
using namespace std;

void rotateMatrix(vector<vector<int>>&matrix){
    int n=matrix.size();

    //rotating 90 degrees clock-wise = transposing -> reversing the each row
    //transposing
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            swap(matrix[i][j],matrix[j][i]);
        }
    }
    //reversing each row
    //Now,our given matrix is rotated clock-wise
    for(int i=0;i<n;i++){
        reverse(matrix[i].begin(),matrix[i].end());
    }
}
---------------------------------------------------
Question 26 : 
Approach 1 :- Brute Force
vector<pair<int,int>>Merge(vector<pair<int,int>>&arr){
    int n=arr.size();
    vector<pair<int,int>>ans;
    //sorting the array,if input is not sorted
    sort(arr.begin(), arr.end());
    //checking for each interval
    for(int i=0;i<n;i++){
        int s=arr[i].first;
        int e=arr[i].second;

        //if the interval already exits then skip current iteration
        if(!ans.empty()){
            if(s<=ans.back().second()){
                continue;
            }
        }
        //now traversing the latter intervals to check for overlapping
        for(int j=i+1;j<n;j++){
            if(arr[j].first<=e){
                e=max(e,arr[j].second);
            }
        }
        //double-check 
        e=max(e,arr[i].second);
        ans.push_back({s,e});
    }
    return ans;
}
Approach 2: 
