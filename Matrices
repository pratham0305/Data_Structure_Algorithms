------------------------Diagonal Matrix:
#include<iostream>
using namespace std;

class matrix{
	private:
		int n;
		int *A;
	public:
		matrix(int n){
			this->n = n;
			A= new int[n];
		}

		void set(int x,int i, int j){
			if(i==j){
				A[i-1] = x;
			}
		}
		int get(int i,int j){
			if(i==j){
				return A[i];
			}
			
		}

		void display(){
			for(int i=0;i<n;i++){
				for(int j=0;j<n;j++){
					if(i==j){
						cout<<A[i]<<" ";
					}else{
						cout<<"0 ";
					}
				}
				cout<<endl;
			}
		}
		~matrix(){
			delete[] A;
		}
};

int main() {
	class matrix d(5);
	d.set(1,1,1);
	d.set(34,2,2);
	d.set(78,3,3);
	d.set(67,4,4);
	d.set(90,5,5);
	d.display();
	return 0;
}

------------Lower Triagunal Matrix:
#include<iostream>
using namespace std;

class LowerTri{
	private:
		int n;
		int *A;
	public:
		LowerTri(int n){
			this->n = n;
			A= new int[n*(n+1)/2];
		}
	~LowerTri(){
		delete[] A;
	}
	void set(int i,int j, int x){
		if(i>=j){
			A[i*(i-1)/2+(i-j))]=x;  //Storing elements row by row.
		}

	}
	int get(int i,int j){
		if(i>=j){
			return A[i*(i-1)/2+(i-j)];
		} else{
			return -1;
		}
	}

	void display(){
		for(int i=1;i<=n;i++){
			for(int j=1;j<=n;j++){
				cout<<A[i*(i-1)/2+(i-j)]<<" ";
			}
			cout<<endl;
		}
	}
};

int main(){
	int n;
	cin>>n;
	class LowerTri t(n);
	int x;
	cout<<"Enter elements:\n";
	for(int i=1;i<=n;i++){
		for (int  j = 1; j <= u; j++)
		{
			cin>>x;
			t.set(i,j,x);
		}
		
	}
	t.display();
	
	
	return 0;
}
------------------------------Tri Diagonal Matrix
#include<iostream>
using namespace std;

class TriDiagonal{
	private:
		int n;
		int *A;
	public:
		TriDiagonal(int n){
			this->n = n;
			A= new int[3n-2];
		}
	~TriDiagonal(){
		delete[] A;
	}
	void set(int i,int j, int x){
		if(i-j==1){
			A[i-2]=x;  //Formula to store the lower diagonal elements.
		} else if(i-j==0) {
			A[(n-1)+(i-1)]=x; //Main diagonal elements.
		} else if(i-j==-1){
			A[(2n-1)+(i-1)]=x; //Upper diagonal elements.
		}else {
			cout<<"The element at "<<A[i][j]<<" should be a zero.\n";
		}

	}
	int get(int i,int j){
		if(i-j==1){
			return A[i-2]; //Lower diagonal
		} else if (i-j==0){
			return A[(n-1)+(i-1)]; //Main/Middle diagonal
		} else if (i-j==-1){
			return A[(2n-1)+i-1]; //Upper diagonal
		} else {
			return 0;
		}
	}

	void display(){
		for(int i=1;i<=n;i++){
			for(int j=1;j<=n;j++){
				if(i-j==-1){
					cout<<A[(2n-1)+(i-1)]<<" ";  //Lower diagonal
				} else if(i-j==0){
					cout<<A[(n-1)+(i-1)]<<" "; //Main diagonal 
				} else if(i-j==1){
					cout<<A[i-1]<<" "; //Upper diagonal
				} else {
					cout<<"0 ";
				}
			}
			cout<<endl;
		}
	}
};

int main(){
	int n;
	cin>>n;
	class TriDiagonal t(n);
	int x;
	cout<<"Enter elements:\n";
	for(int i=1;i<=n;i++){
		for (int  j = 1; j <= n; j++)
		{
			cin>>x;
			t.set(i,j,x);
		}
		
	}
	t.display();
	
	return 0;
}
----------------Toeplitz Matrix : In this all diagonal elements are same.
		
		2 3 4 5 6
		7 2 3 4 5 
		8 7 2 3 4 
		9 8 7 2 3 
		10 9 8 7 2
-------------------------Sparse Mtrix : Could be non- sqaured and squared matrix.

#include<iostream>
#include<stdio.h>
using namespace std;

class element {         //Defining a element using the coordinate method which will save the row, column and
	public:						//the value. 
		int i;
		int j;
		int x;
};

class Sparse {
	int m;
	int n;
	int num;
	element *e;  //Creating a dynamic array pointer.
	public:
	Sparse(int m, int n, int num){
		this->m = m;
		this->n = n;
		this->num = num;
		this->e = new element[this->num];  //Initializing an array of ojects.
	}
	~Sparse() {
		delete[] e;
	}
	void read(){
		cout<<"Enter non-zero elements:";
		for(int i=0;i<num; i++){
			cin>>e[i].i>>e[i].j>>e[i].x;   //Taking in the elements.
		}
		
	}
	void display(){
		int k=0;
		for(int i=0;i<num;i++){
			for(int j=0;j<num;j++){
				if(e[k].i==i && e[k].j==j){
					cout<<e[k++].x<<" ";		//Displaying the elements.
				} else {
					cout<<"0 ";
				}
			}
			cout<<"\n";
		}
	}

};

int main() {
	class Sparse s(5,5,5);  //Number of rows and columns could be different.
	s.read();
	s.display();
	return 0;
}
-----------------Addition of two Sparse Matrices:
#include<iostream>
#include<stdio.h>
using namespace std;

class element {         //Defining a element using the coordinate method which will save the row, column and
	public:						//the value. 
		int i;
		int j;
		int x;
};

class Sparse {
	int m;
	int n;
	int num;
	element *e;  //Creating a dynamic array pointer.
	public:
	Sparse(int m, int n, int num){
		this->m = m;
		this->n = n;
		this->num = num;
		this->e = new element[this->num];  //Initializing an array of ojects.
	}
	~Sparse() {
		delete[] e;
	}
	void read(){
		cout<<"Enter non-zero elements:";
		for(int i=0;i<num; i++){
			cin>>e[i].i>>e[i].j>>e[i].x;   //Taking in the elements.
		}
		
	}
	void __add__(Sparse s){
		int i,j,k=0;
		if (this->m != s.m && this->n != s.n)  //Checking if the two matrices have same dimensions
		{
			cout<<"We cannot add the matrices.";
		}
		class Sparse *sum = new Sparse(this->m, this->n, (this->num + s.num)); //Initializing the sum matrix.
		i=j=k=0;
		while (i < this->num && j < s.num) //Loop to traverse over each value.
		{
			if (this->e[i].i < s.e[j].i) //Check if rows are equal (left[first] operand's row number is less).
			{
				sum->e[k++] = this->e[i++]; //The third(sum) matrix will get the element of left first matrix.
			}
			else if (this->e[i].i > s.e[j].i) //Check if rows are equal (left[first] operand's row number is greater).
			{
				sum->e[k++]=s.e[j++];   //The third(sum) matrix will get the element of left first matrix.
			}
			else
			{	//Iif rows of both the matrics are equal.
				if (this->e[i].j < s.e[j].j)  //Now, same three cases for columns.
				{
					sum->e[k++].j = this->e[i++].j;
				}
				else if (this->e[i].j > s.e[j].j)
				{
					sum->e[k++]=s.e[j++];
				}
				else //If both rows and columns are equal.
				{
					sum->e[k] = this->e[i]; //sum will take the left's element.
					sum->e[k++].x = this->e[i++].x + s.e[j++].x;
				}
			}
		}//The below for loops for all the remaining elements.
		for(;i<num;i++) sum->e[k++] = this->e[i++];
		for(;j<s.num;j++) sum->e[k++]=s.e[j++];
		sum->display();

	}
	void display(){
		int k=0;
		for(int i=0;i<num;i++){
			for(int j=0;j<num;j++){
				if(e[k].i==i && e[k].j==j){
					cout<<e[k++].x<<" ";		//Displaying the elements.
				} else {
					cout<<"0 ";
				}
			}
			cout<<"\n";
		}
	}

};

int main() {
	class Sparse s(5,5,5);
	class Sparse s1(5,5,5);

	cout<<"First Matrix:\n";
	s.read();
	cout<<"Second Matrix:\n";
	s1.read();
	s.__add__(s1);
	cout<<"Added Matrix:\n";
	
	
	return 0;
}

--------------------------------------------------
Reversing A Linked List:
Approach 1:: Iterative
Node* reverseLinkedList(Node* head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    Node* prev=NULL;
    Node* curr=head;
    Node* fwd;
    while(curr!=NULL){
        fwd=curr->next;
        curr->next=prev;
        prev=curr;
        curr=fwd;
    }
    return prev;
  Approach 2:: Recursive
  void reverse(Node* &head,Node* curr,Node* prev){
    //base case
    if(curr==NULL){
        head=prev;
        return;
    }
    Node* fwd=curr->next;
    reverse(head,fwd,curr);
    curr->next=prev;
}
Node* reverseLinkedList(Node* head){
    Node* curr=head;
    Node* prev=NULL;
    reverse(head,curr,prev);
    return head;

}
--------------------------
Reversing A Linked List in 'K' groups
Solution:
Node* kReverse(Node* head,int k){
    //base case
    if(head==NULL){
        return NULL;
    }
    //step1: reverse first K nodes
    Node* prev=NULL;
    Node* curr=head;
    Node* next=NULL;
    int cnt=0;
    while(curr!=NULL && cnt<k){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
        cnt++;
    }
    //other nodes
    if(next!=NULL){
        head->next=kReverse(next,k);
    }
    
    return prev;

}
--------------------------
Checking if a given linked list id circular or not
Solution:
Approach 1:-
bool isCircular(Node* head){
    if(head==NULL){
        return true;
    }

    Node* temp=head->next;
    while(temp!=NULL && temp!=head){
        temp=temp->next;
    }
    if(temp==head){
        return true;
    }

    return false;
}
-------------------------------------
Detect a loop in a Linked List
Solution:
Approach 1 :-
bool isCircular(Node* head){
    if(head==NULL){
        return false;
    }

    Node* temp=head->next;
    while(temp!=NULL && temp!=head){
        temp=temp->next;
    }
    if(temp==head){
        return true;
    }

    return false;
}

Approach 2: Floyd Detection Method(it detects & return the node where loop ends)
Node* floydDetection(Node* head){
    if(head==NULL){
        return NULL;
    }
    Node* slow=head;
    Node* fast=head;
    while(slow!=NULL && fast!=NULL){
        fast=fast->next;
        if(fast!=NULL){
            fast=fast->next;
        }
        slow=slow->next;
        if(slow==fast){
            return slow;
        }
    }

    return NULL;
}
------------------------------------------------
Deleting middle elemnet from stack
#include<bits/stdc++.h>
using namespace std;

void solve(stack<int>&ans,int count,int size){
	//base case
	if(count== size/2){
		ans.pop();
		return ;
	}
	//saving the non-middle elements
	int num=ans.top();
	ans.pop();

	//recursive call
	solve(ans,count+1,size);
	ans.push(num);
}
void deleteMiddleElement(stack<int>&ans,int n){
	int count=0;
	solve(ans,count,n);
}
int main(){
	stack<int>st;
	st.push(23);
	st.push(89);
	st.push(34);
	st.push(10);
	st.push(90);
	deleteMiddleElement(st,5);
	for(int i=0;i<st.size();i++){
		cout<<st.top()<<endl;
		st.pop();
	}

	


	return 0;
}
------------------------
Sorting A Stack using recusion
void sortedInsert(stack<int>&ans,int x){
    //base case
    if(ans.empty() || ans.top()<x){
        ans.push(x);
        return;
    }
    //saving the elements
    int num=ans.top();
    ans.pop();
    //recrusive call
    sortedInsert(ans,x);
    ans.push(num);
}

void sortStack(stack<int> &stack)
{
	//base case
    if(stack.empty()){
        return ;
    }
    //saving the elements
    int num=stack.top();
    stack.pop();
    //recursive call
    sortStack(stack);
    //insert in sorted order
    sortedInsert(stack,num);
}



