------------------------Diagonal Matrix:
#include<iostream>
using namespace std;

class matrix{
	private:
		int n;
		int *A;
	public:
		matrix(int n){
			this->n = n;
			A= new int[n];
		}

		void set(int x,int i, int j){
			if(i==j){
				A[i-1] = x;
			}
		}
		int get(int i,int j){
			if(i==j){
				return A[i];
			}
			
		}

		void display(){
			for(int i=0;i<n;i++){
				for(int j=0;j<n;j++){
					if(i==j){
						cout<<A[i]<<" ";
					}else{
						cout<<"0 ";
					}
				}
				cout<<endl;
			}
		}
		~matrix(){
			delete[] A;
		}
};

int main() {
	class matrix d(5);
	d.set(1,1,1);
	d.set(34,2,2);
	d.set(78,3,3);
	d.set(67,4,4);
	d.set(90,5,5);
	d.display();
	return 0;
}

------------Lower Triagunal Matrix:
#include<iostream>
using namespace std;

class LowerTri{
	private:
		int n;
		int *A;
	public:
		LowerTri(int n){
			this->n = n;
			A= new int[n*(n+1)/2];
		}
	~LowerTri(){
		delete[] A;
	}
	void set(int i,int j, int x){
		if(i>=j){
			A[i*(i-1)/2+(j-1)]=x;  //Storing elements row by row.
		}

	}
	int get(int i,int j){
		if(i>=j){
			return A[i*(i-1)/2+(j-1)];
		} else{
			return -1;
		}
	}

	void display(){
		for(int i=1;i<=n;i++){
			for(int j=1;j<=n;j++){
				cout<<A[i*(i-1)/2+(j-1)]<<" ";
			}
			cout<<endl;
		}
	}
};

int main(){
	int n;
	cin>>n;
	class LowerTri t(n);
	int x;
	cout<<"Enter elements:\n";
	for(int i=1;i<=n;i++){
		for (int  j = 1; j <= u; j++)
		{
			cin>>x;
			t.set(i,j,x);
		}
		
	}
	t.display();
	
	
	return 0;
}
